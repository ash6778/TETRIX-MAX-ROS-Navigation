<?xml version="1.0"?>

<launch>

  <arg name="model" default="$(find tetrix)/urdf/robot_with_inertial_with_chassis.xacro"/>
<!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find tetrix)/config/joint_states.yaml" command="load"/>
  <arg name="rvizconfig" default="$(find tetrix)/rviz/robot.rviz"/> 
  
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

 <!-- load the controllers 
 
    The controller_spawner node starts the two wheel/joint position controllers for the robot by running a python script that makes a service call to the ros_control controller manager. The service calls tell the controller manager which controllers you want. It also loads a third controller that publishes the joint states of all the joints with hardware_interfaces and advertises the topic on /joint_states.
 
  <node name="controller_spawner"
        pkg="controller_manager"
        type="spawner" 
        respawn="false"
        output="screen"
        ns="/" 
        args="joint_state_controller rightWheel_effort_controller leftWheel_effort_controller"
  /> -->


<!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" 
        command="$(find xacro)/xacro --inorder $(arg model)" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-z 1.0 -urdf -model tetrix -param robot_description"/>

  <!-- Launch state publishers -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/> 
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"/>

  
 

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find tetrix)/rviz/robot.rviz" required="true"/>
</launch>
